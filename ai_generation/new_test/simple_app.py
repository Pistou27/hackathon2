"""
simple_app.py
Mini-pipeline Streamlit : Article ‚ûú R√©sum√© ‚ûú Similarit√© ‚ûú Filtrage ‚ûú Image

D√©pendances (CPU) :
    pip install streamlit torch transformers diffusers sentence-transformers
"""

import os, tempfile, datetime as dt
import streamlit as st

from article_generator import ArticleGenerator         # distilgpt2
from summarization      import TextSummarizer          # distilbart-xsum
from similarity         import SimilarityChecker       # ton module existant
from ethical_filter_v2  import ethical_filter          # ou ethical_filter
from image_gen          import ImageGenerator          # SD-Turbo

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1. Interface
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(page_title="Mini-pipeline Blog", page_icon="üìù", layout="wide")
st.title("üìù Article ¬∑ üì∞ R√©sum√© ¬∑ üé® Image")

topic = st.text_input("Sujet de l'article", placeholder="Ex. : L'IA g√©n√©rative en 2025")
gen_image = st.checkbox("G√©n√©rer une illustration avec Stable Diffusion", value=True)
#temperature = st.slider("Cr√©ativit√© (temperature GPT-2)",0.2, 0.8, 0.35, 0.05)
btn = st.button("G√©n√©rer le pipeline")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 0. Mise en cache des mod√®les (charg√©s 1 fois)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@st.cache_resource(show_spinner="üîÑ Chargement article_generator‚Ä¶")
def get_article_gen():
    return ArticleGenerator()                     # mod√®le + tokenizer

@st.cache_resource(show_spinner=False)
def get_summarizer():
    return TextSummarizer()

@st.cache_resource(show_spinner=False)
def get_img_gen():
    return ImageGenerator(steps=15)                       # Stable Diffusion Turbo

@st.cache_resource(show_spinner=False)
def get_similarity():
    return SimilarityChecker()                    # MiniLM embedder

gen   = get_article_gen()
summ  = get_summarizer()
imgg  = get_img_gen()
simch = get_similarity()



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2. Pipeline
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if btn and topic.strip():
    # 2.1 Article
    with st.spinner("üß† G√©n√©ration de l'article‚Ä¶"):
        article = gen.generate(topic)
    if article.lower().count("sexy") > 5 or article.count("Article:") > 5:
        st.error("‚ö†Ô∏è Article incoh√©rent ou absurde d√©tect√©. Veuillez r√©essayer ou ajuster la temp√©rature.")
        st.stop()

    # 2.2 R√©sum√©
    with st.spinner("üìö R√©sum√©‚Ä¶"):
        summary = summ.summarize(article)

    # 2.3 Similarit√© article ‚Üî r√©sum√©
    with st.spinner("üìè Similarit√© article / r√©sum√©‚Ä¶"):
        sim_score = simch.compare(article, summary)   # 0-1

    # 2.4 Filtrage √©thique
    with st.spinner("üîç Filtrage √©thique‚Ä¶"):
        filt = ethical_filter(summary)
        
    # 2.5 Image
    img_path = None  # Par d√©faut

    if gen_image:
        prompt = f"{topic}, vector illustration, flat design, clean lines, vibrant colors"
        with st.spinner("üé® G√©n√©ration de l'image‚Ä¶"):
            tmp_dir  = tempfile.gettempdir()
            img_path = os.path.join(tmp_dir, f"img_{dt.datetime.now():%H%M%S}.png")
            img_path = imgg.generate(
                prompt,
                negative="text, watermark, lowres, distorted, blurry",
                path=img_path
            )



    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 3. Affichage
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    st.subheader("Article complet")
    st.write(article)

    st.subheader("R√©sum√©")
    st.write(summary)

    st.subheader("üìè Similarit√© r√©sum√© / article")
    bar_color = "#2ecc71" if sim_score >= 0.5 else "#e67e22" if sim_score >= 0.3 else "#e74c3c"
    st.markdown(
        f"""
        <div style="background:{bar_color};padding:6px;border-radius:6px;
                    color:white;width:{sim_score*100:.1f}%">
        {sim_score:.3f}
        </div>
        """,
        unsafe_allow_html=True
    )

    st.subheader("Filtrage √©thique")
    if filt["flagged"]:
        st.error(f"‚ö†Ô∏è Contenu sensible d√©tect√© : {', '.join(filt['labels'])}")
        st.json(filt["scores"])
    else:
        st.success("‚úÖ Aucun contenu probl√©matique d√©tect√©.")

    if gen_image and img_path:
        st.subheader("Illustration g√©n√©r√©e")
        st.image(img_path, caption="Stable Diffusion")